/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tabular

import (
	"encoding/json"
)

// checks if the CreateNamespaceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNamespaceRequest{}

// CreateNamespaceRequest struct for CreateNamespaceRequest
type CreateNamespaceRequest struct {
	Namespace *string `json:"namespace,omitempty"`
	Properties *map[string]string `json:"properties,omitempty"`
}

// NewCreateNamespaceRequest instantiates a new CreateNamespaceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNamespaceRequest() *CreateNamespaceRequest {
	this := CreateNamespaceRequest{}
	return &this
}

// NewCreateNamespaceRequestWithDefaults instantiates a new CreateNamespaceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNamespaceRequestWithDefaults() *CreateNamespaceRequest {
	this := CreateNamespaceRequest{}
	return &this
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *CreateNamespaceRequest) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNamespaceRequest) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *CreateNamespaceRequest) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *CreateNamespaceRequest) SetNamespace(v string) {
	o.Namespace = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *CreateNamespaceRequest) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNamespaceRequest) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *CreateNamespaceRequest) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *CreateNamespaceRequest) SetProperties(v map[string]string) {
	o.Properties = &v
}

func (o CreateNamespaceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNamespaceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableCreateNamespaceRequest struct {
	value *CreateNamespaceRequest
	isSet bool
}

func (v NullableCreateNamespaceRequest) Get() *CreateNamespaceRequest {
	return v.value
}

func (v *NullableCreateNamespaceRequest) Set(val *CreateNamespaceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNamespaceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNamespaceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNamespaceRequest(val *CreateNamespaceRequest) *NullableCreateNamespaceRequest {
	return &NullableCreateNamespaceRequest{value: val, isSet: true}
}

func (v NullableCreateNamespaceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNamespaceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


