/*
Tabular API

Tabular OpenAPI Definition

API version: 1.54.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tabular

import (
	"encoding/json"
)

// checks if the ListWarehouseResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListWarehouseResponse{}

// ListWarehouseResponse struct for ListWarehouseResponse
type ListWarehouseResponse struct {
	Warehouses []Warehouse `json:"warehouses,omitempty"`
}

// NewListWarehouseResponse instantiates a new ListWarehouseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListWarehouseResponse() *ListWarehouseResponse {
	this := ListWarehouseResponse{}
	return &this
}

// NewListWarehouseResponseWithDefaults instantiates a new ListWarehouseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListWarehouseResponseWithDefaults() *ListWarehouseResponse {
	this := ListWarehouseResponse{}
	return &this
}

// GetWarehouses returns the Warehouses field value if set, zero value otherwise.
func (o *ListWarehouseResponse) GetWarehouses() []Warehouse {
	if o == nil || IsNil(o.Warehouses) {
		var ret []Warehouse
		return ret
	}
	return o.Warehouses
}

// GetWarehousesOk returns a tuple with the Warehouses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListWarehouseResponse) GetWarehousesOk() ([]Warehouse, bool) {
	if o == nil || IsNil(o.Warehouses) {
		return nil, false
	}
	return o.Warehouses, true
}

// HasWarehouses returns a boolean if a field has been set.
func (o *ListWarehouseResponse) HasWarehouses() bool {
	if o != nil && !IsNil(o.Warehouses) {
		return true
	}

	return false
}

// SetWarehouses gets a reference to the given []Warehouse and assigns it to the Warehouses field.
func (o *ListWarehouseResponse) SetWarehouses(v []Warehouse) {
	o.Warehouses = v
}

func (o ListWarehouseResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListWarehouseResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Warehouses) {
		toSerialize["warehouses"] = o.Warehouses
	}
	return toSerialize, nil
}

type NullableListWarehouseResponse struct {
	value *ListWarehouseResponse
	isSet bool
}

func (v NullableListWarehouseResponse) Get() *ListWarehouseResponse {
	return v.value
}

func (v *NullableListWarehouseResponse) Set(val *ListWarehouseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListWarehouseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListWarehouseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListWarehouseResponse(val *ListWarehouseResponse) *NullableListWarehouseResponse {
	return &NullableListWarehouseResponse{value: val, isSet: true}
}

func (v NullableListWarehouseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListWarehouseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
