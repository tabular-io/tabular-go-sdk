/*
Tabular API

Tabular OpenAPI Definition

API version: 1.54.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tabular

import (
	"encoding/json"
)

// checks if the CreateTableResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTableResponse{}

// CreateTableResponse struct for CreateTableResponse
type CreateTableResponse struct {
	TableReferenceId *string `json:"tableReferenceId,omitempty"`
	TableLoadId      *string `json:"tableLoadId,omitempty"`
}

// NewCreateTableResponse instantiates a new CreateTableResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTableResponse() *CreateTableResponse {
	this := CreateTableResponse{}
	return &this
}

// NewCreateTableResponseWithDefaults instantiates a new CreateTableResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTableResponseWithDefaults() *CreateTableResponse {
	this := CreateTableResponse{}
	return &this
}

// GetTableReferenceId returns the TableReferenceId field value if set, zero value otherwise.
func (o *CreateTableResponse) GetTableReferenceId() string {
	if o == nil || IsNil(o.TableReferenceId) {
		var ret string
		return ret
	}
	return *o.TableReferenceId
}

// GetTableReferenceIdOk returns a tuple with the TableReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTableResponse) GetTableReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.TableReferenceId) {
		return nil, false
	}
	return o.TableReferenceId, true
}

// HasTableReferenceId returns a boolean if a field has been set.
func (o *CreateTableResponse) HasTableReferenceId() bool {
	if o != nil && !IsNil(o.TableReferenceId) {
		return true
	}

	return false
}

// SetTableReferenceId gets a reference to the given string and assigns it to the TableReferenceId field.
func (o *CreateTableResponse) SetTableReferenceId(v string) {
	o.TableReferenceId = &v
}

// GetTableLoadId returns the TableLoadId field value if set, zero value otherwise.
func (o *CreateTableResponse) GetTableLoadId() string {
	if o == nil || IsNil(o.TableLoadId) {
		var ret string
		return ret
	}
	return *o.TableLoadId
}

// GetTableLoadIdOk returns a tuple with the TableLoadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTableResponse) GetTableLoadIdOk() (*string, bool) {
	if o == nil || IsNil(o.TableLoadId) {
		return nil, false
	}
	return o.TableLoadId, true
}

// HasTableLoadId returns a boolean if a field has been set.
func (o *CreateTableResponse) HasTableLoadId() bool {
	if o != nil && !IsNil(o.TableLoadId) {
		return true
	}

	return false
}

// SetTableLoadId gets a reference to the given string and assigns it to the TableLoadId field.
func (o *CreateTableResponse) SetTableLoadId(v string) {
	o.TableLoadId = &v
}

func (o CreateTableResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTableResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TableReferenceId) {
		toSerialize["tableReferenceId"] = o.TableReferenceId
	}
	if !IsNil(o.TableLoadId) {
		toSerialize["tableLoadId"] = o.TableLoadId
	}
	return toSerialize, nil
}

type NullableCreateTableResponse struct {
	value *CreateTableResponse
	isSet bool
}

func (v NullableCreateTableResponse) Get() *CreateTableResponse {
	return v.value
}

func (v *NullableCreateTableResponse) Set(val *CreateTableResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTableResponse(val *CreateTableResponse) *NullableCreateTableResponse {
	return &NullableCreateTableResponse{value: val, isSet: true}
}

func (v NullableCreateTableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
