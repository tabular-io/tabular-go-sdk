/*
Tabular API

Tabular OpenAPI Definition

API version: 1.54.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tabular

import (
	"encoding/json"
)

// checks if the GetTableResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetTableResponse{}

// GetTableResponse struct for GetTableResponse
type GetTableResponse struct {
	Id             *string `json:"id,omitempty"`
	Name           *string `json:"name,omitempty"`
	OrganizationId *string `json:"organizationId,omitempty"`
	WarehouseId    *string `json:"warehouseId,omitempty"`
	Database       *string `json:"database,omitempty"`
}

// NewGetTableResponse instantiates a new GetTableResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetTableResponse() *GetTableResponse {
	this := GetTableResponse{}
	return &this
}

// NewGetTableResponseWithDefaults instantiates a new GetTableResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetTableResponseWithDefaults() *GetTableResponse {
	this := GetTableResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetTableResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTableResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetTableResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GetTableResponse) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetTableResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTableResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetTableResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetTableResponse) SetName(v string) {
	o.Name = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *GetTableResponse) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTableResponse) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *GetTableResponse) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *GetTableResponse) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetWarehouseId returns the WarehouseId field value if set, zero value otherwise.
func (o *GetTableResponse) GetWarehouseId() string {
	if o == nil || IsNil(o.WarehouseId) {
		var ret string
		return ret
	}
	return *o.WarehouseId
}

// GetWarehouseIdOk returns a tuple with the WarehouseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTableResponse) GetWarehouseIdOk() (*string, bool) {
	if o == nil || IsNil(o.WarehouseId) {
		return nil, false
	}
	return o.WarehouseId, true
}

// HasWarehouseId returns a boolean if a field has been set.
func (o *GetTableResponse) HasWarehouseId() bool {
	if o != nil && !IsNil(o.WarehouseId) {
		return true
	}

	return false
}

// SetWarehouseId gets a reference to the given string and assigns it to the WarehouseId field.
func (o *GetTableResponse) SetWarehouseId(v string) {
	o.WarehouseId = &v
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *GetTableResponse) GetDatabase() string {
	if o == nil || IsNil(o.Database) {
		var ret string
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTableResponse) GetDatabaseOk() (*string, bool) {
	if o == nil || IsNil(o.Database) {
		return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *GetTableResponse) HasDatabase() bool {
	if o != nil && !IsNil(o.Database) {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given string and assigns it to the Database field.
func (o *GetTableResponse) SetDatabase(v string) {
	o.Database = &v
}

func (o GetTableResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetTableResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if !IsNil(o.WarehouseId) {
		toSerialize["warehouseId"] = o.WarehouseId
	}
	if !IsNil(o.Database) {
		toSerialize["database"] = o.Database
	}
	return toSerialize, nil
}

type NullableGetTableResponse struct {
	value *GetTableResponse
	isSet bool
}

func (v NullableGetTableResponse) Get() *GetTableResponse {
	return v.value
}

func (v *NullableGetTableResponse) Set(val *GetTableResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTableResponse(val *GetTableResponse) *NullableGetTableResponse {
	return &NullableGetTableResponse{value: val, isSet: true}
}

func (v NullableGetTableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
