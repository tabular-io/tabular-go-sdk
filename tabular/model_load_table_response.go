/*
Tabular API

Tabular OpenAPI Definition

API version: 1.54.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tabular

import (
	"encoding/json"
)

// checks if the LoadTableResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadTableResponse{}

// LoadTableResponse struct for LoadTableResponse
type LoadTableResponse struct {
	TableLoadId *string `json:"tableLoadId,omitempty"`
}

// NewLoadTableResponse instantiates a new LoadTableResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadTableResponse() *LoadTableResponse {
	this := LoadTableResponse{}
	return &this
}

// NewLoadTableResponseWithDefaults instantiates a new LoadTableResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadTableResponseWithDefaults() *LoadTableResponse {
	this := LoadTableResponse{}
	return &this
}

// GetTableLoadId returns the TableLoadId field value if set, zero value otherwise.
func (o *LoadTableResponse) GetTableLoadId() string {
	if o == nil || IsNil(o.TableLoadId) {
		var ret string
		return ret
	}
	return *o.TableLoadId
}

// GetTableLoadIdOk returns a tuple with the TableLoadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableResponse) GetTableLoadIdOk() (*string, bool) {
	if o == nil || IsNil(o.TableLoadId) {
		return nil, false
	}
	return o.TableLoadId, true
}

// HasTableLoadId returns a boolean if a field has been set.
func (o *LoadTableResponse) HasTableLoadId() bool {
	if o != nil && !IsNil(o.TableLoadId) {
		return true
	}

	return false
}

// SetTableLoadId gets a reference to the given string and assigns it to the TableLoadId field.
func (o *LoadTableResponse) SetTableLoadId(v string) {
	o.TableLoadId = &v
}

func (o LoadTableResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadTableResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TableLoadId) {
		toSerialize["tableLoadId"] = o.TableLoadId
	}
	return toSerialize, nil
}

type NullableLoadTableResponse struct {
	value *LoadTableResponse
	isSet bool
}

func (v NullableLoadTableResponse) Get() *LoadTableResponse {
	return v.value
}

func (v *NullableLoadTableResponse) Set(val *LoadTableResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadTableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadTableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadTableResponse(val *LoadTableResponse) *NullableLoadTableResponse {
	return &NullableLoadTableResponse{value: val, isSet: true}
}

func (v NullableLoadTableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadTableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
