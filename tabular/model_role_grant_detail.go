/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tabular

import (
	"encoding/json"
)

// checks if the RoleGrantDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleGrantDetail{}

// RoleGrantDetail struct for RoleGrantDetail
type RoleGrantDetail struct {
	Id *string `json:"id,omitempty"`
	Role *RoleRef `json:"role,omitempty"`
	Privilege *string `json:"privilege,omitempty"`
	WithGrant *bool `json:"withGrant,omitempty"`
}

// NewRoleGrantDetail instantiates a new RoleGrantDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleGrantDetail() *RoleGrantDetail {
	this := RoleGrantDetail{}
	return &this
}

// NewRoleGrantDetailWithDefaults instantiates a new RoleGrantDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleGrantDetailWithDefaults() *RoleGrantDetail {
	this := RoleGrantDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoleGrantDetail) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleGrantDetail) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoleGrantDetail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RoleGrantDetail) SetId(v string) {
	o.Id = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RoleGrantDetail) GetRole() RoleRef {
	if o == nil || IsNil(o.Role) {
		var ret RoleRef
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleGrantDetail) GetRoleOk() (*RoleRef, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RoleGrantDetail) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given RoleRef and assigns it to the Role field.
func (o *RoleGrantDetail) SetRole(v RoleRef) {
	o.Role = &v
}

// GetPrivilege returns the Privilege field value if set, zero value otherwise.
func (o *RoleGrantDetail) GetPrivilege() string {
	if o == nil || IsNil(o.Privilege) {
		var ret string
		return ret
	}
	return *o.Privilege
}

// GetPrivilegeOk returns a tuple with the Privilege field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleGrantDetail) GetPrivilegeOk() (*string, bool) {
	if o == nil || IsNil(o.Privilege) {
		return nil, false
	}
	return o.Privilege, true
}

// HasPrivilege returns a boolean if a field has been set.
func (o *RoleGrantDetail) HasPrivilege() bool {
	if o != nil && !IsNil(o.Privilege) {
		return true
	}

	return false
}

// SetPrivilege gets a reference to the given string and assigns it to the Privilege field.
func (o *RoleGrantDetail) SetPrivilege(v string) {
	o.Privilege = &v
}

// GetWithGrant returns the WithGrant field value if set, zero value otherwise.
func (o *RoleGrantDetail) GetWithGrant() bool {
	if o == nil || IsNil(o.WithGrant) {
		var ret bool
		return ret
	}
	return *o.WithGrant
}

// GetWithGrantOk returns a tuple with the WithGrant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleGrantDetail) GetWithGrantOk() (*bool, bool) {
	if o == nil || IsNil(o.WithGrant) {
		return nil, false
	}
	return o.WithGrant, true
}

// HasWithGrant returns a boolean if a field has been set.
func (o *RoleGrantDetail) HasWithGrant() bool {
	if o != nil && !IsNil(o.WithGrant) {
		return true
	}

	return false
}

// SetWithGrant gets a reference to the given bool and assigns it to the WithGrant field.
func (o *RoleGrantDetail) SetWithGrant(v bool) {
	o.WithGrant = &v
}

func (o RoleGrantDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleGrantDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Privilege) {
		toSerialize["privilege"] = o.Privilege
	}
	if !IsNil(o.WithGrant) {
		toSerialize["withGrant"] = o.WithGrant
	}
	return toSerialize, nil
}

type NullableRoleGrantDetail struct {
	value *RoleGrantDetail
	isSet bool
}

func (v NullableRoleGrantDetail) Get() *RoleGrantDetail {
	return v.value
}

func (v *NullableRoleGrantDetail) Set(val *RoleGrantDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleGrantDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleGrantDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleGrantDetail(val *RoleGrantDetail) *NullableRoleGrantDetail {
	return &NullableRoleGrantDetail{value: val, isSet: true}
}

func (v NullableRoleGrantDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleGrantDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


