/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tabular

import (
	"encoding/json"
)

// checks if the UploadResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadResponse{}

// UploadResponse struct for UploadResponse
type UploadResponse struct {
	FileKeyPaths []string `json:"fileKeyPaths,omitempty"`
	StageKeyPath *string `json:"stageKeyPath,omitempty"`
	TableName *string `json:"tableName,omitempty"`
	TableId *string `json:"tableId,omitempty"`
	StorageProfileId *string `json:"storageProfileId,omitempty"`
	Errors []map[string]map[string]interface{} `json:"errors,omitempty"`
}

// NewUploadResponse instantiates a new UploadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadResponse() *UploadResponse {
	this := UploadResponse{}
	return &this
}

// NewUploadResponseWithDefaults instantiates a new UploadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadResponseWithDefaults() *UploadResponse {
	this := UploadResponse{}
	return &this
}

// GetFileKeyPaths returns the FileKeyPaths field value if set, zero value otherwise.
func (o *UploadResponse) GetFileKeyPaths() []string {
	if o == nil || IsNil(o.FileKeyPaths) {
		var ret []string
		return ret
	}
	return o.FileKeyPaths
}

// GetFileKeyPathsOk returns a tuple with the FileKeyPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadResponse) GetFileKeyPathsOk() ([]string, bool) {
	if o == nil || IsNil(o.FileKeyPaths) {
		return nil, false
	}
	return o.FileKeyPaths, true
}

// HasFileKeyPaths returns a boolean if a field has been set.
func (o *UploadResponse) HasFileKeyPaths() bool {
	if o != nil && !IsNil(o.FileKeyPaths) {
		return true
	}

	return false
}

// SetFileKeyPaths gets a reference to the given []string and assigns it to the FileKeyPaths field.
func (o *UploadResponse) SetFileKeyPaths(v []string) {
	o.FileKeyPaths = v
}

// GetStageKeyPath returns the StageKeyPath field value if set, zero value otherwise.
func (o *UploadResponse) GetStageKeyPath() string {
	if o == nil || IsNil(o.StageKeyPath) {
		var ret string
		return ret
	}
	return *o.StageKeyPath
}

// GetStageKeyPathOk returns a tuple with the StageKeyPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadResponse) GetStageKeyPathOk() (*string, bool) {
	if o == nil || IsNil(o.StageKeyPath) {
		return nil, false
	}
	return o.StageKeyPath, true
}

// HasStageKeyPath returns a boolean if a field has been set.
func (o *UploadResponse) HasStageKeyPath() bool {
	if o != nil && !IsNil(o.StageKeyPath) {
		return true
	}

	return false
}

// SetStageKeyPath gets a reference to the given string and assigns it to the StageKeyPath field.
func (o *UploadResponse) SetStageKeyPath(v string) {
	o.StageKeyPath = &v
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *UploadResponse) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadResponse) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *UploadResponse) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *UploadResponse) SetTableName(v string) {
	o.TableName = &v
}

// GetTableId returns the TableId field value if set, zero value otherwise.
func (o *UploadResponse) GetTableId() string {
	if o == nil || IsNil(o.TableId) {
		var ret string
		return ret
	}
	return *o.TableId
}

// GetTableIdOk returns a tuple with the TableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadResponse) GetTableIdOk() (*string, bool) {
	if o == nil || IsNil(o.TableId) {
		return nil, false
	}
	return o.TableId, true
}

// HasTableId returns a boolean if a field has been set.
func (o *UploadResponse) HasTableId() bool {
	if o != nil && !IsNil(o.TableId) {
		return true
	}

	return false
}

// SetTableId gets a reference to the given string and assigns it to the TableId field.
func (o *UploadResponse) SetTableId(v string) {
	o.TableId = &v
}

// GetStorageProfileId returns the StorageProfileId field value if set, zero value otherwise.
func (o *UploadResponse) GetStorageProfileId() string {
	if o == nil || IsNil(o.StorageProfileId) {
		var ret string
		return ret
	}
	return *o.StorageProfileId
}

// GetStorageProfileIdOk returns a tuple with the StorageProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadResponse) GetStorageProfileIdOk() (*string, bool) {
	if o == nil || IsNil(o.StorageProfileId) {
		return nil, false
	}
	return o.StorageProfileId, true
}

// HasStorageProfileId returns a boolean if a field has been set.
func (o *UploadResponse) HasStorageProfileId() bool {
	if o != nil && !IsNil(o.StorageProfileId) {
		return true
	}

	return false
}

// SetStorageProfileId gets a reference to the given string and assigns it to the StorageProfileId field.
func (o *UploadResponse) SetStorageProfileId(v string) {
	o.StorageProfileId = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *UploadResponse) GetErrors() []map[string]map[string]interface{} {
	if o == nil || IsNil(o.Errors) {
		var ret []map[string]map[string]interface{}
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadResponse) GetErrorsOk() ([]map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *UploadResponse) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []map[string]map[string]interface{} and assigns it to the Errors field.
func (o *UploadResponse) SetErrors(v []map[string]map[string]interface{}) {
	o.Errors = v
}

func (o UploadResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileKeyPaths) {
		toSerialize["fileKeyPaths"] = o.FileKeyPaths
	}
	if !IsNil(o.StageKeyPath) {
		toSerialize["stageKeyPath"] = o.StageKeyPath
	}
	if !IsNil(o.TableName) {
		toSerialize["tableName"] = o.TableName
	}
	if !IsNil(o.TableId) {
		toSerialize["tableId"] = o.TableId
	}
	if !IsNil(o.StorageProfileId) {
		toSerialize["storageProfileId"] = o.StorageProfileId
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableUploadResponse struct {
	value *UploadResponse
	isSet bool
}

func (v NullableUploadResponse) Get() *UploadResponse {
	return v.value
}

func (v *NullableUploadResponse) Set(val *UploadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadResponse(val *UploadResponse) *NullableUploadResponse {
	return &NullableUploadResponse{value: val, isSet: true}
}

func (v NullableUploadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


