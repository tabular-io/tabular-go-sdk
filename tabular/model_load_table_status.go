/*
Tabular API

Tabular OpenAPI Definition

API version: 1.54.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tabular

import (
	"encoding/json"
	"time"
)

// checks if the LoadTableStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadTableStatus{}

// LoadTableStatus struct for LoadTableStatus
type LoadTableStatus struct {
	TableLoadId          *string    `json:"tableLoadId,omitempty"`
	WarehouseId          *string    `json:"warehouseId,omitempty"`
	TableRefId           *string    `json:"tableRefId,omitempty"`
	StatusMessage        *string    `json:"statusMessage,omitempty"`
	State                *string    `json:"state,omitempty"`
	LoadTableState       *string    `json:"loadTableState,omitempty"`
	Progress             *float32   `json:"progress,omitempty"`
	Attempt              *int32     `json:"attempt,omitempty"`
	TotalBytes           *int64     `json:"totalBytes,omitempty"`
	TotalLoadedBytes     *int64     `json:"totalLoadedBytes,omitempty"`
	TotalFileCount       *int32     `json:"totalFileCount,omitempty"`
	TotalLoadedFileCount *int32     `json:"totalLoadedFileCount,omitempty"`
	LastModified         *time.Time `json:"lastModified,omitempty"`
	CreatedAt            *time.Time `json:"createdAt,omitempty"`
	ExpireAt             *time.Time `json:"expireAt,omitempty"`
	TimeoutAt            *time.Time `json:"timeoutAt,omitempty"`
}

// NewLoadTableStatus instantiates a new LoadTableStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadTableStatus() *LoadTableStatus {
	this := LoadTableStatus{}
	return &this
}

// NewLoadTableStatusWithDefaults instantiates a new LoadTableStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadTableStatusWithDefaults() *LoadTableStatus {
	this := LoadTableStatus{}
	return &this
}

// GetTableLoadId returns the TableLoadId field value if set, zero value otherwise.
func (o *LoadTableStatus) GetTableLoadId() string {
	if o == nil || IsNil(o.TableLoadId) {
		var ret string
		return ret
	}
	return *o.TableLoadId
}

// GetTableLoadIdOk returns a tuple with the TableLoadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetTableLoadIdOk() (*string, bool) {
	if o == nil || IsNil(o.TableLoadId) {
		return nil, false
	}
	return o.TableLoadId, true
}

// HasTableLoadId returns a boolean if a field has been set.
func (o *LoadTableStatus) HasTableLoadId() bool {
	if o != nil && !IsNil(o.TableLoadId) {
		return true
	}

	return false
}

// SetTableLoadId gets a reference to the given string and assigns it to the TableLoadId field.
func (o *LoadTableStatus) SetTableLoadId(v string) {
	o.TableLoadId = &v
}

// GetWarehouseId returns the WarehouseId field value if set, zero value otherwise.
func (o *LoadTableStatus) GetWarehouseId() string {
	if o == nil || IsNil(o.WarehouseId) {
		var ret string
		return ret
	}
	return *o.WarehouseId
}

// GetWarehouseIdOk returns a tuple with the WarehouseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetWarehouseIdOk() (*string, bool) {
	if o == nil || IsNil(o.WarehouseId) {
		return nil, false
	}
	return o.WarehouseId, true
}

// HasWarehouseId returns a boolean if a field has been set.
func (o *LoadTableStatus) HasWarehouseId() bool {
	if o != nil && !IsNil(o.WarehouseId) {
		return true
	}

	return false
}

// SetWarehouseId gets a reference to the given string and assigns it to the WarehouseId field.
func (o *LoadTableStatus) SetWarehouseId(v string) {
	o.WarehouseId = &v
}

// GetTableRefId returns the TableRefId field value if set, zero value otherwise.
func (o *LoadTableStatus) GetTableRefId() string {
	if o == nil || IsNil(o.TableRefId) {
		var ret string
		return ret
	}
	return *o.TableRefId
}

// GetTableRefIdOk returns a tuple with the TableRefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetTableRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.TableRefId) {
		return nil, false
	}
	return o.TableRefId, true
}

// HasTableRefId returns a boolean if a field has been set.
func (o *LoadTableStatus) HasTableRefId() bool {
	if o != nil && !IsNil(o.TableRefId) {
		return true
	}

	return false
}

// SetTableRefId gets a reference to the given string and assigns it to the TableRefId field.
func (o *LoadTableStatus) SetTableRefId(v string) {
	o.TableRefId = &v
}

// GetStatusMessage returns the StatusMessage field value if set, zero value otherwise.
func (o *LoadTableStatus) GetStatusMessage() string {
	if o == nil || IsNil(o.StatusMessage) {
		var ret string
		return ret
	}
	return *o.StatusMessage
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetStatusMessageOk() (*string, bool) {
	if o == nil || IsNil(o.StatusMessage) {
		return nil, false
	}
	return o.StatusMessage, true
}

// HasStatusMessage returns a boolean if a field has been set.
func (o *LoadTableStatus) HasStatusMessage() bool {
	if o != nil && !IsNil(o.StatusMessage) {
		return true
	}

	return false
}

// SetStatusMessage gets a reference to the given string and assigns it to the StatusMessage field.
func (o *LoadTableStatus) SetStatusMessage(v string) {
	o.StatusMessage = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *LoadTableStatus) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *LoadTableStatus) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *LoadTableStatus) SetState(v string) {
	o.State = &v
}

// GetLoadTableState returns the LoadTableState field value if set, zero value otherwise.
func (o *LoadTableStatus) GetLoadTableState() string {
	if o == nil || IsNil(o.LoadTableState) {
		var ret string
		return ret
	}
	return *o.LoadTableState
}

// GetLoadTableStateOk returns a tuple with the LoadTableState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetLoadTableStateOk() (*string, bool) {
	if o == nil || IsNil(o.LoadTableState) {
		return nil, false
	}
	return o.LoadTableState, true
}

// HasLoadTableState returns a boolean if a field has been set.
func (o *LoadTableStatus) HasLoadTableState() bool {
	if o != nil && !IsNil(o.LoadTableState) {
		return true
	}

	return false
}

// SetLoadTableState gets a reference to the given string and assigns it to the LoadTableState field.
func (o *LoadTableStatus) SetLoadTableState(v string) {
	o.LoadTableState = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *LoadTableStatus) GetProgress() float32 {
	if o == nil || IsNil(o.Progress) {
		var ret float32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetProgressOk() (*float32, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *LoadTableStatus) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given float32 and assigns it to the Progress field.
func (o *LoadTableStatus) SetProgress(v float32) {
	o.Progress = &v
}

// GetAttempt returns the Attempt field value if set, zero value otherwise.
func (o *LoadTableStatus) GetAttempt() int32 {
	if o == nil || IsNil(o.Attempt) {
		var ret int32
		return ret
	}
	return *o.Attempt
}

// GetAttemptOk returns a tuple with the Attempt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetAttemptOk() (*int32, bool) {
	if o == nil || IsNil(o.Attempt) {
		return nil, false
	}
	return o.Attempt, true
}

// HasAttempt returns a boolean if a field has been set.
func (o *LoadTableStatus) HasAttempt() bool {
	if o != nil && !IsNil(o.Attempt) {
		return true
	}

	return false
}

// SetAttempt gets a reference to the given int32 and assigns it to the Attempt field.
func (o *LoadTableStatus) SetAttempt(v int32) {
	o.Attempt = &v
}

// GetTotalBytes returns the TotalBytes field value if set, zero value otherwise.
func (o *LoadTableStatus) GetTotalBytes() int64 {
	if o == nil || IsNil(o.TotalBytes) {
		var ret int64
		return ret
	}
	return *o.TotalBytes
}

// GetTotalBytesOk returns a tuple with the TotalBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetTotalBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalBytes) {
		return nil, false
	}
	return o.TotalBytes, true
}

// HasTotalBytes returns a boolean if a field has been set.
func (o *LoadTableStatus) HasTotalBytes() bool {
	if o != nil && !IsNil(o.TotalBytes) {
		return true
	}

	return false
}

// SetTotalBytes gets a reference to the given int64 and assigns it to the TotalBytes field.
func (o *LoadTableStatus) SetTotalBytes(v int64) {
	o.TotalBytes = &v
}

// GetTotalLoadedBytes returns the TotalLoadedBytes field value if set, zero value otherwise.
func (o *LoadTableStatus) GetTotalLoadedBytes() int64 {
	if o == nil || IsNil(o.TotalLoadedBytes) {
		var ret int64
		return ret
	}
	return *o.TotalLoadedBytes
}

// GetTotalLoadedBytesOk returns a tuple with the TotalLoadedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetTotalLoadedBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalLoadedBytes) {
		return nil, false
	}
	return o.TotalLoadedBytes, true
}

// HasTotalLoadedBytes returns a boolean if a field has been set.
func (o *LoadTableStatus) HasTotalLoadedBytes() bool {
	if o != nil && !IsNil(o.TotalLoadedBytes) {
		return true
	}

	return false
}

// SetTotalLoadedBytes gets a reference to the given int64 and assigns it to the TotalLoadedBytes field.
func (o *LoadTableStatus) SetTotalLoadedBytes(v int64) {
	o.TotalLoadedBytes = &v
}

// GetTotalFileCount returns the TotalFileCount field value if set, zero value otherwise.
func (o *LoadTableStatus) GetTotalFileCount() int32 {
	if o == nil || IsNil(o.TotalFileCount) {
		var ret int32
		return ret
	}
	return *o.TotalFileCount
}

// GetTotalFileCountOk returns a tuple with the TotalFileCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetTotalFileCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalFileCount) {
		return nil, false
	}
	return o.TotalFileCount, true
}

// HasTotalFileCount returns a boolean if a field has been set.
func (o *LoadTableStatus) HasTotalFileCount() bool {
	if o != nil && !IsNil(o.TotalFileCount) {
		return true
	}

	return false
}

// SetTotalFileCount gets a reference to the given int32 and assigns it to the TotalFileCount field.
func (o *LoadTableStatus) SetTotalFileCount(v int32) {
	o.TotalFileCount = &v
}

// GetTotalLoadedFileCount returns the TotalLoadedFileCount field value if set, zero value otherwise.
func (o *LoadTableStatus) GetTotalLoadedFileCount() int32 {
	if o == nil || IsNil(o.TotalLoadedFileCount) {
		var ret int32
		return ret
	}
	return *o.TotalLoadedFileCount
}

// GetTotalLoadedFileCountOk returns a tuple with the TotalLoadedFileCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetTotalLoadedFileCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalLoadedFileCount) {
		return nil, false
	}
	return o.TotalLoadedFileCount, true
}

// HasTotalLoadedFileCount returns a boolean if a field has been set.
func (o *LoadTableStatus) HasTotalLoadedFileCount() bool {
	if o != nil && !IsNil(o.TotalLoadedFileCount) {
		return true
	}

	return false
}

// SetTotalLoadedFileCount gets a reference to the given int32 and assigns it to the TotalLoadedFileCount field.
func (o *LoadTableStatus) SetTotalLoadedFileCount(v int32) {
	o.TotalLoadedFileCount = &v
}

// GetLastModified returns the LastModified field value if set, zero value otherwise.
func (o *LoadTableStatus) GetLastModified() time.Time {
	if o == nil || IsNil(o.LastModified) {
		var ret time.Time
		return ret
	}
	return *o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastModified) {
		return nil, false
	}
	return o.LastModified, true
}

// HasLastModified returns a boolean if a field has been set.
func (o *LoadTableStatus) HasLastModified() bool {
	if o != nil && !IsNil(o.LastModified) {
		return true
	}

	return false
}

// SetLastModified gets a reference to the given time.Time and assigns it to the LastModified field.
func (o *LoadTableStatus) SetLastModified(v time.Time) {
	o.LastModified = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *LoadTableStatus) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *LoadTableStatus) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *LoadTableStatus) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise.
func (o *LoadTableStatus) GetExpireAt() time.Time {
	if o == nil || IsNil(o.ExpireAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpireAt
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetExpireAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpireAt) {
		return nil, false
	}
	return o.ExpireAt, true
}

// HasExpireAt returns a boolean if a field has been set.
func (o *LoadTableStatus) HasExpireAt() bool {
	if o != nil && !IsNil(o.ExpireAt) {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given time.Time and assigns it to the ExpireAt field.
func (o *LoadTableStatus) SetExpireAt(v time.Time) {
	o.ExpireAt = &v
}

// GetTimeoutAt returns the TimeoutAt field value if set, zero value otherwise.
func (o *LoadTableStatus) GetTimeoutAt() time.Time {
	if o == nil || IsNil(o.TimeoutAt) {
		var ret time.Time
		return ret
	}
	return *o.TimeoutAt
}

// GetTimeoutAtOk returns a tuple with the TimeoutAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadTableStatus) GetTimeoutAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeoutAt) {
		return nil, false
	}
	return o.TimeoutAt, true
}

// HasTimeoutAt returns a boolean if a field has been set.
func (o *LoadTableStatus) HasTimeoutAt() bool {
	if o != nil && !IsNil(o.TimeoutAt) {
		return true
	}

	return false
}

// SetTimeoutAt gets a reference to the given time.Time and assigns it to the TimeoutAt field.
func (o *LoadTableStatus) SetTimeoutAt(v time.Time) {
	o.TimeoutAt = &v
}

func (o LoadTableStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadTableStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TableLoadId) {
		toSerialize["tableLoadId"] = o.TableLoadId
	}
	if !IsNil(o.WarehouseId) {
		toSerialize["warehouseId"] = o.WarehouseId
	}
	if !IsNil(o.TableRefId) {
		toSerialize["tableRefId"] = o.TableRefId
	}
	if !IsNil(o.StatusMessage) {
		toSerialize["statusMessage"] = o.StatusMessage
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.LoadTableState) {
		toSerialize["loadTableState"] = o.LoadTableState
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.Attempt) {
		toSerialize["attempt"] = o.Attempt
	}
	if !IsNil(o.TotalBytes) {
		toSerialize["totalBytes"] = o.TotalBytes
	}
	if !IsNil(o.TotalLoadedBytes) {
		toSerialize["totalLoadedBytes"] = o.TotalLoadedBytes
	}
	if !IsNil(o.TotalFileCount) {
		toSerialize["totalFileCount"] = o.TotalFileCount
	}
	if !IsNil(o.TotalLoadedFileCount) {
		toSerialize["totalLoadedFileCount"] = o.TotalLoadedFileCount
	}
	if !IsNil(o.LastModified) {
		toSerialize["lastModified"] = o.LastModified
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.ExpireAt) {
		toSerialize["expireAt"] = o.ExpireAt
	}
	if !IsNil(o.TimeoutAt) {
		toSerialize["timeoutAt"] = o.TimeoutAt
	}
	return toSerialize, nil
}

type NullableLoadTableStatus struct {
	value *LoadTableStatus
	isSet bool
}

func (v NullableLoadTableStatus) Get() *LoadTableStatus {
	return v.value
}

func (v *NullableLoadTableStatus) Set(val *LoadTableStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadTableStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadTableStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadTableStatus(val *LoadTableStatus) *NullableLoadTableStatus {
	return &NullableLoadTableStatus{value: val, isSet: true}
}

func (v NullableLoadTableStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadTableStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
