/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tabular

import (
	"encoding/json"
)

// checks if the CreateDatabaseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDatabaseRequest{}

// CreateDatabaseRequest struct for CreateDatabaseRequest
type CreateDatabaseRequest struct {
	Name *string `json:"name,omitempty"`
	Properties *map[string]string `json:"properties,omitempty"`
}

// NewCreateDatabaseRequest instantiates a new CreateDatabaseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDatabaseRequest() *CreateDatabaseRequest {
	this := CreateDatabaseRequest{}
	return &this
}

// NewCreateDatabaseRequestWithDefaults instantiates a new CreateDatabaseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDatabaseRequestWithDefaults() *CreateDatabaseRequest {
	this := CreateDatabaseRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateDatabaseRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateDatabaseRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateDatabaseRequest) SetName(v string) {
	o.Name = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *CreateDatabaseRequest) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequest) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *CreateDatabaseRequest) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *CreateDatabaseRequest) SetProperties(v map[string]string) {
	o.Properties = &v
}

func (o CreateDatabaseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDatabaseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableCreateDatabaseRequest struct {
	value *CreateDatabaseRequest
	isSet bool
}

func (v NullableCreateDatabaseRequest) Get() *CreateDatabaseRequest {
	return v.value
}

func (v *NullableCreateDatabaseRequest) Set(val *CreateDatabaseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDatabaseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDatabaseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDatabaseRequest(val *CreateDatabaseRequest) *NullableCreateDatabaseRequest {
	return &NullableCreateDatabaseRequest{value: val, isSet: true}
}

func (v NullableCreateDatabaseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDatabaseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


